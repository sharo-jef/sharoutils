buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        // ? kotlin
        classpath 'org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.4.21'
        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.4.21'
        classpath 'org.jetbrains.kotlin:kotlin-reflect:1.4.21'
        classpath 'org.jetbrains:annotations:13.0'
    }
}

// ? kotlin
plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.4.21'
    id 'org.jetbrains.kotlin.kapt' version '1.4.21'
}

// ? kotlin
compileKotlin {
    kotlinOptions {
        jvmTarget = '1.8'
        freeCompilerArgs += [
                '-Xno-call-assertions',
                '-Xno-receiver-assertions',
                '-Xno-param-assertions',
                '-include-runtime'
        ]
    }
}

apply plugin: 'net.minecraftforge.gradle'

// ? kotlin
apply plugin: 'kotlin'
apply plugin: 'kotlin-kapt'

apply plugin: 'eclipse'
apply plugin: 'maven-publish'

// ! 1. VERSION
version = '1.16.5-1.0.8' // format: minecraftVersion-modVersion
// ! 2. PACKAGE
group = 'org.sharo.sharoutils' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
// ! 3. MODID
archivesBaseName = 'sharoutils'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

tasks.withType(Jar) {
    compileJava.options.encoding = 'UTF-8'
    compileJava.options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

minecraft {
    mappings channel: 'snapshot', version: '20201028-1.16.3'
    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'examplemod', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

// ? kotlin
configurations {
    embed
    compile.extendsFrom(embed)
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.16.5-36.2.34'
    // ? kotlin
    compile 'org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.4.21'
    compile 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.4.21'
    embed 'org.jetbrains.kotlin:kotlin-reflect:1.4.21'
    compile 'org.jetbrains:annotations:13.0'
}

jar {
    manifest {
        attributes([
            // ! 4. MODID
            "Specification-Title": "sharoutils",
            // ! 5. USERNAME
            "Specification-Vendor": "sharo_jef",
            "Specification-Version": "1",
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            // ! 6. USERNAME
            "Implementation-Vendor" :"sharo_jef",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    // ? kotlin
    from {
        configurations.embed.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
